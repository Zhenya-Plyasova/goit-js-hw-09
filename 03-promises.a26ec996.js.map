{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAaC,SAASC,kBAAkB,SAAS,GACjDC,EAAYF,SAASC,kBAAkB,QAAQ,GAC/CE,EAAcH,SAASC,kBAAkB,UAAU,GACnDG,EAASJ,SAASK,cAAc,UA4BtC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEJF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEjBA,E,IArCPQ,QAAQC,IAAI,MAEZb,EAAOc,iBAAiB,SACxB,SAAuBC,GACvBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOvB,EAAWwB,OAC1BC,EAAOF,OAAOpB,EAAUqB,OACxBE,EAASH,OAAOnB,EAAYoB,OAEhCP,QAAQC,IAAI,SAAwBS,OAAfL,EAAM,WAAwBK,OAAfF,EAAK,YAAiBE,OAAPD,IACnD,IAAK,IAAIE,EAAI,EAAGA,GAAIF,EAAQE,IAC1BrB,EAAcqB,EAAIN,GACjBO,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAEjBsB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCN,OAAfnB,EAAS,QAAYmB,OAANlB,EAAM,M,IAEvEyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAElBsB,EAAAjC,GAASkC,OAAOG,QAAQ,sBAAqCR,OAAfnB,EAAS,QAAYmB,OAANlB,EAAM,M,IAGrEa,GAAOG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.6.min.css\";\n\nconst delayInput = document.getElementsByName(\"delay\")[0];\nconst stepInput = document.getElementsByName(\"step\")[0];\nconst amountInput = document.getElementsByName(\"amount\")[0];\nconst button = document.querySelector(\"button\");\n\nconsole.log(\"Hi\");\n\nbutton.addEventListener(\"click\", onButtonClick);\nfunction onButtonClick(event){\nevent.preventDefault();\n\nlet delay = Number(delayInput.value);\nlet step = Number(stepInput.value);\nlet amount = Number(amountInput.value);\n\nconsole.log(`delay ${delay}, step ${step}, value ${amount}`);\nfor (let i = 1; i <=amount; i++) {\n  createPromise(i, (delay))\n  .then(({ position, delay }) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\n  });\n  delay+=step;\n}\n};\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject)=>{\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(()=>{\n      if (shouldResolve) {\n          // console.log(`promis ${position}, with delay ${delay}`);\n      resolve({position, delay});\n        } else {\n      reject({position, delay});\n  }\n    }, delay);\n  });\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","getElementsByName","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$button","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","delay1","Number","value","step","amount","concat","i","then","param","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.a26ec996.js.map"}