{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAaC,SAASC,kBAAkB,SAAS,GACjDC,EAAYF,SAASC,kBAAkB,QAAQ,GAC/CE,EAAcH,SAASC,kBAAkB,UAAU,GACnDG,EAASJ,SAASK,cAAc,UA4BtC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEJF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAExBA,EAAM,G,CArCbQ,QAAQC,IAAI,MAEZb,EAAOc,iBAAiB,SACxB,SAAuBC,GACvBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOvB,EAAWwB,OAC1BC,EAAOF,OAAOpB,EAAUqB,OACxBE,EAASH,OAAOnB,EAAYoB,OAEhCP,QAAQC,IAAI,SAASI,WAAeG,YAAeC,KACnD,IAAK,IAAIC,EAAI,EAAGA,GAAID,EAAQC,IAC1BpB,EAAcoB,EAAIL,GACjBM,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MAEjBoB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEzEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAElBoB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoBzB,QAAeC,MAAU,IAGvEa,GAAOG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.6.min.css\";\n\nconst delayInput = document.getElementsByName(\"delay\")[0];\nconst stepInput = document.getElementsByName(\"step\")[0];\nconst amountInput = document.getElementsByName(\"amount\")[0];\nconst button = document.querySelector(\"button\");\n\nconsole.log(\"Hi\");\n\nbutton.addEventListener(\"click\", onButtonClick);\nfunction onButtonClick(event){\nevent.preventDefault();\n\nlet delay = Number(delayInput.value);\nlet step = Number(stepInput.value);\nlet amount = Number(amountInput.value);\n\nconsole.log(`delay ${delay}, step ${step}, value ${amount}`);\nfor (let i = 1; i <=amount; i++) {\n  createPromise(i, (delay))\n  .then(({ position, delay }) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\n  });\n  delay+=step;\n}\n};\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject)=>{\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(()=>{\n      if (shouldResolve) {\n          // console.log(`promis ${position}, with delay ${delay}`);\n      resolve({position, delay});\n        } else {\n      reject({position, delay});\n  }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delayInput","document","getElementsByName","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$button","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","delay1","Number","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.1e8e7602.js.map"}